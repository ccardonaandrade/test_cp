---
title: "ZLG ING - Business Analysis"
subtitle: "Data Analyst Test"

lang: en

format: 
  closeread-html:
   css: msaz.css
   code-tools: false
   fig-format: svg
   toc: true
   toc_depth: 4
   toc_float: true
   toc-location: left
   linkcolor: tomato
  
toc-title: "Jump to"
---

```{r}
#| echo: false
#| warning: false
library(tidyverse)
library(readxl)
library(janitor)
library(broom)
library(knitr)
library(kableExtra)
library(patchwork)


data_original <- read_xlsx("C:/Users/ccard/Downloads/order_data_.xlsx")

data <- data_original
data <- data |> 
  clean_names()


data <- data |> 
  mutate(ins_inventory = case_when(
    reason_code == "69-Insufficient Inventory" ~ 1,
    TRUE ~ 0  # everything else, including NA
  ))

data$product_number <- gsub("\\.0$", "", data$product_number)


# Logical condition: rows where year(entry_date) > 2022
filter_rows <- year(data$entry_date) > 2022

# Remove parentheses
data$product_number[filter_rows] <- gsub("\\(|\\)", "", data$product_number[filter_rows])

# Remove minus sign
data$product_number[filter_rows] <- gsub("-", "", data$product_number[filter_rows])


data <- data |>
  mutate(product_number = str_trim(product_number))


data <- data |>
  mutate(
    # Create condition
    condition = year(entry_date) > 2022,
    
    # Conditionally multiply each variable
    customer_number = if_else(condition, customer_number * -1, customer_number),
    original_quantity = if_else(condition, original_quantity * -1, original_quantity),
    order_quantity = if_else(condition, order_quantity * -1, order_quantity),
    delivery_quantity = if_else(condition, delivery_quantity * -1, delivery_quantity),
    service_level_status = if_else(condition, service_level_status * -1, service_level_status)
  ) %>%
  select(-condition)  # Remove the helper column if not needed


# Estimated price

data <- data |>
  mutate(estimated_price = order_line_item_total / ifelse(order_quantity == 0, NA, order_quantity))


# Cleaning the region

data <- data |>
  mutate(region_clean = case_when(
    str_detect(region, "Americas") ~ "americas",
    str_detect(region, "Europe") ~ "europe",
    str_detect(region, "Asia") ~ "asia",
    TRUE ~ "other"  # fallback in case there's something unexpected
  ))


```

This report examines ZLG.inc’s order data to assess challenges related to unfulfilled orders and evaluate the CEO's claim about reorder behavior. We highlight key product demand trends, client-level impacts, and financial losses due to inventory shortages.

We also analyze ordering patterns from January to March 2023—right after the POS system change—and test whether clients reordered the same products within 60 days at equal or higher quantities.

Our aim is to offer a data-backed recommendation on the value of investing in improved warehouse management.

Any comments or questions? Feel free to reach out:

`r fontawesome::fa("envelope")` [ccardonaandrade@gmail.com](mailto:ccardonaandrade@gmail.com)

## Objective I 

### 10 most popular products

Which products lead the pack in customer demand? The table shows the top 10 products by total ordered quantity, displaying each product's volume contribution percentage, revenue generation, and financial impact percentage across the portfolio.

**Conclusions:**

- Product `3016012` dominates volume with 63,500 units (17.93% of orders) but contributes minimally to revenue (0.08%).

- Product `97403` ranks third in quantity but generates the highest revenue ($1.7M), indicating it's a high-value item with strong demand.

- Volume doesn't equal profit - the top revenue contributors (products `97403` and `5482401`) aren't the highest-volume sellers.

```{r}
#| echo: false
#| warning: false

most_popular <- data |>
  group_by(product_number) |>
  summarise(
    total_order_quantity = sum(order_quantity, na.rm = TRUE),
    total_order_line = sum(order_line_item_total, na.rm = TRUE)
  ) |>
  mutate(
  share_quantity = round(100 * (total_order_quantity / sum(total_order_quantity)),2),
  share_order_line = round(100 * (total_order_line / sum(total_order_line)),2)
) |> select(product_number,total_order_quantity, share_quantity, total_order_line, share_order_line)


most_popular |>
  arrange(desc(total_order_quantity)) |>
  slice_head(n = 10) |>
  rename(
    "Product Number" = product_number,
    "Total Ordered Quantity" = total_order_quantity,
    "Total Ordered Amount" = total_order_line,
    "Participation Quantity" = share_quantity,
    "Participation Amount" = share_order_line,
  ) |>
  kable(caption = "Top 10 Most Popular Products by Total Order Quantity", align = c("c", "r", "r", "r", "r")) |> row_spec(1:5, bold = T, color = "white", background = "#D7261E") 
```


### 3 clients with the most unfulfilled orders

Unfulfilled orders can signal bottlenecks. The next table identifies the three clients with the highest number of unfulfilled orders, showing both the quantity of non-delivered orders and the financial impact of these missed opportunities.

**Conclusions:**

- Client `79016870` represents the greatest financial loss ($27,592.57) despite having fewer unfulfilled orders than the top client, suggesting these are higher-value transactions that should be prioritized.

- While these three clients account for 208 unfulfilled orders worth $65,770.72, they represent only about 9.5% of the total 2,194 unfulfilled orders, indicating that addressing their issues would solve only a small portion of the overall fulfillment problem.

```{r}
#| echo: false
#| warning: false

summary_status <- data |> 
  filter(ins_inventory == 1) |> 
  group_by(customer_number) |> 
  summarise(numb_nodelivery = n(), 
            total_amount_lost=sum(amount_lost, na.rm = TRUE))


# First create the transformed top3 dataframe
top3 <- summary_status |>
  arrange(desc(numb_nodelivery)) |>
  slice_head(n = 3) |>
  rename(
    "Costumer Number" = customer_number,
    "Total Non-Delivered Orders" = numb_nodelivery,
    "Total Amount Lost" = total_amount_lost
  )

# Get the exact column names from top3
col_names <- colnames(top3)

# Create the total row as a data frame with one row
total_row <- data.frame(matrix(ncol = length(col_names), nrow = 1))
colnames(total_row) <- col_names

# Fill in the values
total_row[1, "Costumer Number"] <- "Total"
total_row[1, "Total Amount Lost"] <- sum(top3$`Total Amount Lost`, na.rm = TRUE)
total_row[1, "Total Non-Delivered Orders"] <- ""

# Combine and create the table
rbind(top3, total_row) |>
  kable(caption = "Top 3 clients with the most unfulfilled orders", align = c("c", "r", "r")) |> row_spec(4, bold = T, color = "white", background = "#D7261E") 
```


### What happened during the first quarter of 2023?

The visual analysis below breaks down trends in order volume, lost revenue, and delivery issues from June 2022 to June 2023—with a focus on patterns emerging between January and March 2023. Use the tabs to explore each dimension.

**Conclusions:**

- Order quantities reached their peak in January 2023 before steadily declining through March.

- Loss amounts were consistently high throughout Q1 2023, with multiple extreme spikes indicating systematic fulfillment issues.

- Average order values declined notably during Q1 2023, suggesting a shift toward lower-priced items.

- The share of non-delivered orders increased dramatically in late Q1 2023, reaching the highest levels of the entire analysis period.

- Asia consistently dominates monthly order shares, while Europe and the Americas trade places as distant seconds—highlighting Asia’s key role in demand.

```{r}
#| echo: false
#| warning: false
#| fig-align: center
#| out-width: 90%


summary_data <- data |>
  mutate(entry_date = as.Date(entry_date)) |>
  group_by(entry_date) |>
  summarise(
    total_order_quantity = sum(order_quantity, na.rm = TRUE),
    total_amount_lost = sum(amount_lost, na.rm = TRUE),
    ins_inventory = sum(ins_inventory, na.rm = TRUE),
    avg_order_quantity = mean(order_quantity, na.rm = TRUE),
    avg_amount_lost = mean(amount_lost, na.rm = TRUE),
    avg_ins_inventory = mean(ins_inventory, na.rm = TRUE),
    avg_estimated_price = mean(estimated_price, na.rm = TRUE)
  ) |>
  mutate(share_nodeliver = ins_inventory / total_order_quantity)


highlight_data <- summary_data |>
  filter(entry_date >= as.Date("2023-01-01") & entry_date <= as.Date("2023-03-31"))

base_data <- summary_data |>
  filter(entry_date < as.Date("2023-01-01") | entry_date > as.Date("2023-03-31"))

p1 <- ggplot() +
  geom_line(data = base_data, aes(x = entry_date, y = total_order_quantity), color = "steelblue") +
  geom_line(data = highlight_data, aes(x = entry_date, y = total_order_quantity), color = "darkred") +
  scale_x_date(
    limits = as.Date(c("2022-06-01", "2023-05-31")),
    date_labels = "%b"  # Format as abbreviated month name
  ) +
  scale_y_continuous(labels = scales::comma) +
  theme_minimal() +
  labs(
    x = "Date",
    y = "",
    subtitle = "Total"
  )

p2 <- ggplot() +
  geom_line(data = base_data, aes(x = entry_date, y = total_amount_lost), color = "steelblue") +
  geom_line(data = highlight_data, aes(x = entry_date, y = total_amount_lost), color = "darkred") +
  scale_x_date(
    limits = as.Date(c("2022-06-01", "2023-05-31")),
    date_labels = "%b"  # Format as abbreviated month name
  ) +
  scale_y_continuous(labels = scales::comma) +
  theme_minimal() +
  labs(
    x = "Date",
    y = "",
    subtitle = "Total"
  )

p3 <- ggplot() +
  geom_line(data = base_data, aes(x = entry_date, y = avg_order_quantity), color = "steelblue") +
  geom_line(data = highlight_data, aes(x = entry_date, y = avg_order_quantity), color = "darkred") +
  scale_x_date(
    limits = as.Date(c("2022-06-01", "2023-05-31")),
    date_labels = "%b"  # Format as abbreviated month name
  ) +
  theme_minimal() +
  labs(
    x = "Date", y="",
    subtitle = "Average")

p4 <- ggplot() +
  geom_line(data = base_data, aes(x = entry_date, y = avg_amount_lost), color = "steelblue") +
  geom_line(data = highlight_data, aes(x = entry_date, y = avg_amount_lost), color = "darkred") +
  scale_x_date(
    limits = as.Date(c("2022-06-01", "2023-05-31")),
    date_labels = "%b"  # Format as abbreviated month name
  ) +
  scale_y_continuous(labels = scales::comma) +
  theme_minimal() +
  labs(
    x = "Date", y = "", 
    subtitle = "Average")

#(p1 + p2) / (p3 + p4) +
# plot_annotation(
#   title = "Analysis Jun 2022 – Jun 2023"
# ) & 
# theme(plot.title = element_text(hjust = 0.5))  

p5 <- ggplot() +
  geom_line(data = base_data, aes(x = entry_date, y = avg_estimated_price), color = "steelblue") +
  geom_line(data = highlight_data, aes(x = entry_date, y = avg_estimated_price), color = "darkred") +
  scale_x_date(
    limits = as.Date(c("2022-06-01", "2023-05-31")),
    date_labels = "%b"  # Format as abbreviated month name
  ) +
  scale_y_continuous(labels = scales::comma) +
  theme_minimal() +
  labs(
    x = "Date", y = "", 
    subtitle = "Average Estimated Price")


p6 <- ggplot() +
  geom_line(data = base_data, aes(x = entry_date, y = share_nodeliver), color = "steelblue") +
  geom_line(data = highlight_data, aes(x = entry_date, y = share_nodeliver), color = "darkred") +
  scale_x_date(
    limits = as.Date(c("2022-06-01", "2023-05-31")),
    date_labels = "%b"  # Format as abbreviated month name
  ) +
  scale_y_continuous(labels = scales::comma) +
  theme_minimal() +
  labs(
    x = "Date", y = "", 
    subtitle = "Share of Non-Delivered Orders")

```


::: panel-tabset
## Ordered Quantity

```{r}
#| echo: false
#| warning: false
#| fig-align: center
#| out-width: 90%
(p1 + p3) +
  plot_annotation(
    title = "Ordered Quantity Jun 2022 – April 2023"
  ) & 
  theme(plot.title = element_text(hjust = 0.5)) 
```

## Lost Amount

```{r}
#| echo: false
#| warning: false
#| fig-align: center
#| out-width: 90%
(p2 + p4) +
  plot_annotation(
    title = "Lost Amount Jun 2022 – April 2023"
  ) & 
  theme(plot.title = element_text(hjust = 0.5)) 
```


## Price and Shared of Non Deliveries

```{r}
#| echo: false
#| warning: false
#| fig-align: center
#| out-width: 90%

(p5 + p6) +
  plot_annotation(
    title = "Analysis Jun 2022 – April 2023"
  ) & 
  theme(plot.title = element_text(hjust = 0.5)) 
```

## Geographical Origin


```{r}
#| echo: false
#| warning: false
#| fig-align: center
#| out-width: 90%

data <- data |>
  mutate(entry_date = as.Date(entry_date))

# Aggregate data by month and region
order_shares_monthly <- data |>
  mutate(month = floor_date(entry_date, "month")) |>
  group_by(month, region_clean) |>
  summarise(region_quantity = sum(order_quantity, na.rm = TRUE), .groups = "drop") |>
  group_by(month) |>
  mutate(
    total_monthly_quantity = sum(region_quantity),
    share = region_quantity / total_monthly_quantity
  )

# Plot: Stacked bar chart by month
ggplot(order_shares_monthly, aes(x = month, y = share, fill = region_clean)) +
  geom_bar(stat = "identity", color = "white") +
  scale_y_continuous(labels = scales::percent_format(), limits = c(0, 1)) +
  scale_x_date(
    limits = as.Date(c("2022-06-01", "2023-05-31")),
    date_labels = "%b"  # Format as abbreviated month name
  ) +
  scale_fill_manual(
    values = c(
      "europe" = "darkblue",
      "asia" = "darkgreen",
      "americas" = "darkred"
    ),
    labels = c(
      "europe" = "Europe",
      "asia" = "Asia",
      "americas" = "Americas"
    )
  ) +
  labs(
    title = "Monthly Share of Order Quantities by Region",
    x = "Month",
    y = "Share of Ordered Quantity",
    fill = "Region"
  ) +
  theme_minimal() +
  theme(plot.title = element_text(hjust = 0.5))
```



:::


## Objective II


### How do customers respond after a delivery failure?

The plot below shows whether customers reordered the same product within 60 days following an unsuccessful delivery.

**Conclusions:**

A **majority of customers reordered the product** after a failed delivery, suggesting that delivery issues do not entirely deter customers from trying again. This could indicate:

- Strong product demand or loyalty.

- Customers may attribute the failure to external factors rather than the product or seller.

```{r}
#| echo: false
#| warning: false
#| out-width: 60%
#| fig-align: center

no_deliver_events <- data |>
  filter(ins_inventory == 1) |>
  select(customer_number, product_number, entry_date, order_quantity, amount_lost, order_line_item_total) |>
  rename(failed_date = entry_date, failed_qty = order_quantity, lost_amount=amount_lost, order_amount=order_line_item_total)

## How many do not reorder?

# Step 1: Get all reorders after the failed date
reorders <- data |>
  inner_join(no_deliver_events, by = c("customer_number", "product_number")) |>
  filter(entry_date > failed_date) |>
  distinct(customer_number, product_number, failed_date) |>
  mutate(came_back = 1)

# Step 2: Join to no_deliver_events and create indicator
no_deliver_events <- no_deliver_events |>
  left_join(reorders, by = c("customer_number", "product_number", "failed_date")) |>
  mutate(never_came_back = if_else(is.na(came_back), 1, 0)) |>
  select(-came_back)

# Calculate percentages for labels
never_came_back_summary <- no_deliver_events |>
  group_by(never_came_back) |>
  summarise(count = n()) |>
  mutate(percent = count / sum(count) * 100,
         label = paste0(count, " (", round(percent, 1), "%)"),
         status = ifelse(never_came_back == 1, "Did Not Reorder", "Reordered"))

# Create improved bar chart
ggplot(never_came_back_summary, aes(x = status, y = count, fill = status)) +
  geom_bar(stat = "identity", width = 0.6) +
  geom_text(aes(label = label), vjust = -0.5, size = 4) +
  scale_fill_manual(values = c("Reordered" = "#1B9E77", "Did Not Reorder" = "#D95F02")) +
  labs(
    title = "Customer Reordering Behavior After Failed Delivery",
    subtitle = "Analysis of whether customers reordered the same product after a delivery failure",
    x = "",
    y = "Number of Instances"
  ) +
  theme_minimal() +
  theme(
    legend.position = "none",
    plot.title = element_text(hjust = 0.5, face = "bold"),
    plot.subtitle = element_text(hjust = 0.5),
    axis.text.x = element_text(size = 12)
  )
```


### How do reordering and non-reordering customers differ?

What is the cost of losing a customer? These visuals highlight the differences in average lost revenue and failed quantities between return customers and those who never came back.

**Conclusions:**

- Customers with larger failed quantities are more likely to reorder, perhaps because the stakes are higher for them. 

- Meanwhile, a higher financial loss correlates with a greater chance that a customer will not return — highlighting the importance of minimizing and recovering from large financial impacts in delivery failures.

```{r}
#| echo: false
#| warning: false
#| out-width: 80%
#| fig-align: center

p1 <- no_deliver_events |>
  group_by(never_came_back) |>
  summarise(avg_lost_amount = mean(lost_amount, na.rm = TRUE)) |>
  mutate(status = if_else(never_came_back == 1, "Never Came Back", "Reordered")) |>
  ggplot(aes(x = status, y = avg_lost_amount, fill = status)) +
  geom_col(width = 0.6, show.legend = FALSE) +
  labs(
    subtitle = "Average Lost Amount ($)",
    x = "",
    y = ""
  ) +
  theme_minimal() +
  scale_fill_manual(values = c("#D95F02", "#1B9E77")) +
  ylim(0,1000) +
  theme(axis.text.x = element_blank()) +  # Remove x-axis labels
  guides(fill = guide_legend(title = NULL))  # Remove legend title

# Plot 2: Average Failed Quantity
p2 <- no_deliver_events |>
  group_by(never_came_back) |>
  summarise(avg_failed_qty = mean(failed_qty, na.rm = TRUE)) |>
  mutate(status = if_else(never_came_back == 1, "Never Came Back", "Reordered")) |>
  ggplot(aes(x = status, y = avg_failed_qty, fill = status)) +
  geom_col(width = 0.6, show.legend = FALSE) +
  labs(
    subtitle = "Average Failed Quantity",
    x = "",
    y = ""
  ) +
  theme_minimal() +
  scale_fill_manual(values = c("#D95F02", "#1B9E77")) +
  theme(axis.text.x = element_blank()) +  # Remove x-axis labels
  guides(fill = guide_legend(title = NULL))  # Remove legend title

# Plot 3: Average Order Amount
p3 <- no_deliver_events |>
  group_by(never_came_back) |>
  summarise(avg_order_amount = mean(order_amount, na.rm = TRUE)) |>
  mutate(status = if_else(never_came_back == 1, "Never Came Back", "Reordered")) |>
  ggplot(aes(x = status, y = avg_order_amount, fill = status)) +
  geom_col(width = 0.6) +
  labs(
    subtitle = "Average Ordered Amount ($)",
    x = "",
    y = ""
  ) +
  theme_minimal() +
  scale_fill_manual(values = c("#D95F02", "#1B9E77")) +
  theme(axis.text.x = element_blank()) +  # Remove x-axis labels
  guides(fill = guide_legend(title = NULL))  # Remove legend title

# Combine plots with a shared legend at the bottom
p2 + p3 + p1 +
  plot_annotation(
    title = "Customer Retention and Order Outcomes"
  ) & 
  theme(plot.title = element_text(hjust = 0.5)) &
  plot_layout(guides = "collect") &  # Collect legends
  theme(legend.position = "bottom")  # Position the legend at the bottom

```


### How long are taking to reorder?

The following plot shows how long it takes customers to reorder after a failed delivery.


**Conclusions:**

- Most customers reorder between 15 and 30 days after a failure.

- There's a significant delay before they return — few reorder immediately.

- The peak reorder time is around 20–25 days, meaning it takes 3+ weeks on average for the business to recover the revenue from a failed order.

```{r}
#| echo: false
#| warning: false
#| out-width: 60%
#| fig-align: center

recovery_orders <- no_deliver_events |>
  inner_join(data, by = c("customer_number", "product_number")) |>
  filter(entry_date > failed_date,                              # future orders
         entry_date <= failed_date + 60,                        # within 60 days
         order_quantity >= failed_qty) |>
  mutate(days_since_failure = as.numeric(entry_date - failed_date)) |>
  select(customer_number, product_number, lost_amount, failed_date, entry_date, order_quantity, days_since_failure)

recovery_orders |>
  group_by(customer_number) |>
  summarise(avg_days = mean(days_since_failure)) |>
  ggplot(aes(x = avg_days)) +
  geom_histogram(binwidth = 5, fill = "#0073C2", color = "white") +
  labs(title = "Average Reorder Time per Customer",
       x = "Average Days Since Failure", y = "Number of Customers") +
  theme_minimal()

```


### What should be the decision?

Upgrading the warehouse system will not only reduce order failures but also accelerate reorders and enhance customer loyalty. It’s an investment in both **customer retention** and **financial stability**.


